service: ${self:custom.serviceName}

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'demo'}
  region: ${env:region, 'eu-west-1'}
  memorySize: 128
  stackTags:
    name: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: "*"
    - Effect: 'Allow'
      Action: 
        - sts:AssumeRole
      Resource: "*"

  environment:
    ROLE: { "Fn::GetAtt" : [ "IamRoleLambdaExecution", "Arn" ] }
    ORIGIN: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'          

    S3Data:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.dataBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - HEAD
              AllowedOrigins: 
                - "*"

    Frontend:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontBucket}
        WebsiteConfiguration:
          IndexDocument: index.html        

    FrontEndBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Frontend
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ CfOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource: 
                !Join
                  - ""
                  - - Fn::GetAtt: [Frontend, Arn]
                    - "/*"

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:custom.serviceName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /auth.html

          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.frontBucket}
            ViewerProtocolPolicy: 'https-only'
            DefaultTTL: ${self:custom.frontTTL}
            MaxTTL: ${self:custom.frontTTL}
            MinTTL: ${self:custom.frontTTL}
            ForwardedValues:
              QueryString: false
              Cookies: 
                Forward: all
              Headers:
                - Referer
            TrustedSigners:
              - self

          CacheBehaviors:
            - TargetOriginId: ${self:custom.frontBucket}
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                  Forward: all
                Headers:
                  - Referer
              PathPattern: '/${self:provider.stage}/error*'

            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                  Forward: all
                Headers:
                  - Referer
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              PathPattern: '/${self:provider.stage}/login*'

            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                  Forward: all
                Headers:
                  - Referer
              AllowedMethods:
                - GET
                - HEAD
              PathPattern: '/${self:provider.stage}/redirect*'

            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                  Forward: all
                Headers:
                  - Referer
              AllowedMethods:
                - GET
                - HEAD
              PathPattern: '/${self:provider.stage}/get*'            

            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Headers:
                  - Referer
                Cookies: 
                  Forward: all
              AllowedMethods:
                - GET
                - HEAD
              PathPattern: '/${self:provider.stage}/set*'   

            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                    Forward: all
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              PathPattern: '/${self:provider.stage}/sign-cookies*' 

          Enabled: true
          
          Origins:
            - Id: ${self:custom.frontBucket}
              DomainName: 
                !Join
                  - ''
                  - - ${self:custom.frontBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig: 
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    -
                      - 'origin-access-identity/cloudfront/'
                      - Ref: CfOriginAccessIdentity

            - Id: loginandsigning
              DomainName: 
                !Join
                  - ''
                  - - !Ref ApiGatewayRestApi
                    - '.execute-api.'
                    - ${self:provider.region}
                    - '.amazonaws.com'
              #OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only'

    CfOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "access-identity-for-${self:custom.serviceName}"

functions:
  login:
    handler: backend/login/app.handler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true

    environment:
      ALLOWED_DOMAINS: 
        !Join
          - ","
          - - Fn::GetAtt: [CloudFrontDistribution, DomainName]
            - "localhost:8080"

      IDP_HOST: ${env:IDP_HOST, "samltest.id"}
      JWT_SAML_PROFILE:	urn:oid:2.5.4.42, urn:oid:0.9.2342.19200300.100.1.3, urn:oid:2.16.840.1.113730.3.1.241		
      JWT_SECRET: ${env:JWT_SECRET, "12345678"}
      SAML_CERT: ${env:SAML_CERT, "MIIDEjCCAfqgAwIBAgIVAMECQ1tjghafm5OxWDh9hwZfxthWMA0GCSqGSIb3DQEB CwUAMBYxFDASBgNVBAMMC3NhbWx0ZXN0LmlkMB4XDTE4MDgyNDIxMTQwOVoXDTM4 MDgyNDIxMTQwOVowFjEUMBIGA1UEAwwLc2FtbHRlc3QuaWQwggEiMA0GCSqGSIb3 DQEBAQUAA4IBDwAwggEKAoIBAQC0Z4QX1NFKs71ufbQwoQoW7qkNAJRIANGA4iM0 ThYghul3pC+FwrGv37aTxWXfA1UG9njKbbDreiDAZKngCgyjxj0uJ4lArgkr4AOE jj5zXA81uGHARfUBctvQcsZpBIxDOvUUImAl+3NqLgMGF2fktxMG7kX3GEVNc1kl bN3dfYsaw5dUrw25DheL9np7G/+28GwHPvLb4aptOiONbCaVvh9UMHEA9F7c0zfF /cL5fOpdVa54wTI0u12CsFKt78h6lEGG5jUs/qX9clZncJM7EFkN3imPPy+0HC8n spXiH/MZW8o2cqWRkrw3MzBZW3Ojk5nQj40V6NUbjb7kfejzAgMBAAGjVzBVMB0G A1UdDgQWBBQT6Y9J3Tw/hOGc8PNV7JEE4k2ZNTA0BgNVHREELTArggtzYW1sdGVz dC5pZIYcaHR0cHM6Ly9zYW1sdGVzdC5pZC9zYW1sL2lkcDANBgkqhkiG9w0BAQsF AAOCAQEASk3guKfTkVhEaIVvxEPNR2w3vWt3fwmwJCccW98XXLWgNbu3YaMb2RSn 7Th4p3h+mfyk2don6au7Uyzc1Jd39RNv80TG5iQoxfCgphy1FYmmdaSfO8wvDtHT TNiLArAxOYtzfYbzb5QrNNH/gQEN8RJaEf/g/1GTw9x/103dSMK0RXtl+fRs2nbl D1JJKSQ3AdhxK/weP3aUPtLxVVJ9wMOQOfcy02l+hHMb6uAjsPOpOVKqi3M8XmcU ZOpx4swtgGdeoSpeRyrtMvRwdcciNBp9UZome44qZAYH1iqrpmmjsfI9pJItsgWu 3kXPjhSfj1AJGR1l9JGvJrHki1iHTA=="}
      SAML_DOMAIN:
        Fn::GetAtt: [CloudFrontDistribution, DomainName]        

      SAML_ISSUER: saml-jwt-${self:custom.serviceName}
      STAGE: ${self:provider.stage}

  custom-auth:
    handler: backend/custom-auth/index.handler
    environment:
      JWT_SECRET: ${env:JWT_SECRET, "12345678"}    
      BUCKET: ${self:custom.dataBucket}
      FILE: permissions.csv

  sign-cookies:
    handler: backend/sign-cf-cookies/index.handler
    events:
      - http:
          path: sign-cookies
          method: post
          cors: true
          authorizer:
            name: custom-auth
            resultTtlInSeconds: 1           
    environment:
      AWS_KEYPAIRID: ${env:AWS_KEYPAIRID, "APKAXXXXXXXXXXXXXX"}    
      AWS_PRIVATEKEY: ${env:AWS_PRIVATEKEY, "-----BEGIN RSA PRIVATE KEY----- XXXXXXXXXX -----END RSA PRIVATE KEY-----"}
      AWS_SIGNEDCOOKIES_TTL: ${self:custom.cookieTTL}

custom:
  setupFile: ./setup.${self:provider.stage}.json
  serviceName: ${file(${self:custom.setupFile}):serviceName}
  frontBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):frontendBucket}
  dataBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):dataBucket}
  frontTTL: ${file(${self:custom.setupFile}):frontendTTL}
  cookieTTL: ${file(${self:custom.setupFile}):signedCookieTTL}
  s3Sync:
    - bucketName: ${self:custom.frontBucket} 
      localDir: web
      deleteRemoved: true
    - bucketName: ${self:custom.dataBucket} 
      localDir: permissions
      deleteRemoved: true

package:
  exclude:
    - node_modules/**