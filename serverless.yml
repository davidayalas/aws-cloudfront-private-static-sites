service: ${self:custom.serviceName}

plugins:
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'demo'}
  region: ${env:region, 'eu-west-1'}
  memorySize: 128
  stackTags:
    name: ${self:service}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: "*"
    - Effect: 'Allow'
      Action: 
        - sts:AssumeRole
      Resource: "*"

  environment:
    ROLE: { "Fn::GetAtt" : [ "IamRoleLambdaExecution", "Arn" ] }
    ORIGIN: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'          

    S3Data:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.permissionsBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - POST
                - HEAD
              AllowedOrigins: 
                - "*"

    Frontend:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontBucket}
        WebsiteConfiguration:
          IndexDocument: index.html        

    FrontEndBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: Frontend
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  Fn::GetAtt: [ CfOriginAccessIdentity , S3CanonicalUserId ]
              Action: "s3:GetObject"
              Resource: 
                !Join
                  - ""
                  - - Fn::GetAtt: [Frontend, Arn]
                    - "/*"

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: ${self:custom.serviceName}
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /auth.html

          DefaultCacheBehavior:
            TargetOriginId: ${self:custom.frontBucket}
            ViewerProtocolPolicy: 'https-only'
            DefaultTTL: ${self:custom.frontTTL}
            MaxTTL: ${self:custom.frontTTL}
            MinTTL: ${self:custom.frontTTL}
            ForwardedValues:
              QueryString: false
              Cookies: 
                Forward: all
              Headers:
                - Referer
            TrustedSigners:
              - self

          CacheBehaviors:
            - TargetOriginId: loginandsigning
              ViewerProtocolPolicy: 'https-only'
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0
              ForwardedValues:
                QueryString: false
                Cookies: 
                  Forward: all
                Headers:
                  - Referer
              AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
              PathPattern: '/${self:provider.stage}/*'

          Enabled: true
          
          Origins:
            - Id: ${self:custom.frontBucket}
              DomainName: 
                !Join
                  - ''
                  - - ${self:custom.frontBucket}
                    - '.s3-${self:provider.region}.amazonaws.com'
              S3OriginConfig: 
                OriginAccessIdentity:
                  Fn::Join:
                    - ''
                    -
                      - 'origin-access-identity/cloudfront/'
                      - Ref: CfOriginAccessIdentity

            - Id: loginandsigning
              DomainName: 
                !Join
                  - ''
                  - - !Ref ApiGatewayRestApi
                    - '.execute-api.'
                    - ${self:provider.region}
                    - '.amazonaws.com'
              #OriginPath: /${self:provider.stage}
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only'

    CfOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "access-identity-for-${self:custom.serviceName}"

  Outputs:
    CloudFrontDNS:
      Description: dns from distribution
      Value: !GetAtt CloudFrontDistribution.DomainName
      Export:
        Name: CloudFrontDNS-${self:custom.serviceName}

functions:
  login:
    handler: backend/login/app.handler
    events:
      - http:
          path: /{proxy+}
          method: any
          cors: true

    environment:
      ALLOWED_DOMAINS: 
        !Join
          - ","
          - - Fn::GetAtt: [CloudFrontDistribution, DomainName]
            - "localhost:8080"

      IDP_HOST: ${env:IDP_HOST}
      SAML_PROFILE_UID:	urn:oid:0.9.2342.19200300.100.1.3
      #JWT_SAML_PROFILE: urn:oid:2.5.4.42, urn:oid:0.9.2342.19200300.100.1.3, urn:oid:2.16.840.1.113730.3.1.241		
      #JWT_SECRET: ${env:JWT_SECRET, "12345678"}
      SAML_CERT: ${env:SAML_CERT}
      SAML_DOMAIN:
        Fn::GetAtt: [CloudFrontDistribution, DomainName]        

      SAML_ISSUER: saml-jwt-${self:custom.serviceName}
      STAGE: ${self:provider.stage}
      AWS_KEYPAIRID: ${env:AWS_KEYPAIRID, "APKAXXXXXXXXXXXXXX"}    
      AWS_PRIVATEKEY: ${env:AWS_PRIVATEKEY, "-----BEGIN RSA PRIVATE KEY----- XXXXXXXXXX -----END RSA PRIVATE KEY-----"}
      AWS_SIGNEDCOOKIES_TTL: ${self:custom.cookieTTL}
      PERMISSIONS_BUCKET: ${self:custom.permissionsBucket}
      PERMISSIONS_FILE: ${self:custom.permissionsFile}

custom:
  setupFile: ./setup.${self:provider.stage}.json
  serviceName: ${file(${self:custom.setupFile}):serviceName}
  frontBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):frontendBucket}
  permissionsBucket: ${self:custom.serviceName}-${file(${self:custom.setupFile}):permissionsBucket}
  permissionsFile: ${file(${self:custom.setupFile}):permissionsFile}
  frontTTL: ${file(${self:custom.setupFile}):frontendTTL}
  cookieTTL: ${file(${self:custom.setupFile}):signedCookieTTL}
  s3Sync:
    - bucketName: ${self:custom.frontBucket} 
      localDir: web
      deleteRemoved: true
    - bucketName: ${self:custom.permissionsBucket} 
      localDir: ${file(${self:custom.setupFile}):permissionsBucket}
      deleteRemoved: true

package:
  exclude:
    - node_modules/**